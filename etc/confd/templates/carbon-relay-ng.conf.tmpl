## Global settings ##

# supported variables:
instance = "{{getenv "HOSTNAME"}}"
max_procs = {{getenv "CARBON_RELAY_MAX_PROCS"}}

admin_addr = "{{getenv "CARBON_RELAY_ADMIN_BIND_IP"}}:{{getenv "CARBON_RELAY_ADMIN_PORT"}}"
http_addr = "{{getenv "CARBON_RELAY_HTTP_BIND_IP"}}:{{getenv "CARBON_RELAY_HTTP_PORT"}}"

spool_dir = "/var/spool/carbon-relay-ng"
pid_file = "/var/run/carbon-relay-ng.pid"
## Logging ##
# one of critical error warning notice info debug
# see docs/logging.md for level descriptions
log_level = "{{getenv "CARBON_RELAY_LOG_LEVEL"}}"

## Validation of inputs ##
# Metric name validation strictness for legacy metrics. Valid values are:
# strict - Block anything that can upset graphite: valid characters are [A-Za-z0-9_-.]; consecutive dots are not allowed
# medium - Valid characters are ASCII; no embedded NULLs
# none   - No validation is performed
validation_level_legacy = "{{getenv "CARBON_RELAY_VALIDATE_LEVEL_LEGACY"}}"
# Metric validation for carbon2.0 (metrics2.0) metrics.
# Metrics that contain = or _is_ are assumed carbon2.0.
# Valid values are:
# medium - checks for unit and mtype tag, presence of another tag, and constency (use = or _is_, not both)
# none   - No validation is performed
validation_level_m20 = "{{getenv "CARBON_RELAY_VALIDATE_LEVEL_M20"}}"

# you can also validate that each series has increasing timestamps
validate_order = false

# How long to keep track of invalid metrics seen
# Useful time units are "s", "m", "h"
bad_metrics_max_age = "24h"

## Inputs ##

### plaintext Carbon ###
listen_addr = "0.0.0.0:{{getenv "CARBON_RELAY_LISTEN_PORT"}}"

### Pickle Carbon ###
pickle_addr = "0.0.0.0:{{getenv "CARBON_RELAY_PICKLE_PORT"}}"

### AMQP ###
[amqp]
amqp_enabled = false
amqp_host = "localhost"
amqp_port = 5672
amqp_user = "guest"
amqp_password = "guest"
amqp_vhost = "/graphite"
amqp_exchange = "metrics"
amqp_queue = ""
amqp_key = "#"
amqp_durable = false
amqp_exclusive = true


# Blacklist

blacklist = [
#  'prefix collectd.localhost',
]

# Aggregaters

#[[aggregation]]
# aggregate timer metrics with averages
# function = 'avg'
# regex = '^stats\.timers\.(app|proxy|static)[0-9]+\.requests\.(.*)'
# format = 'stats.timers._avg_$1.requests.$2'
# interval = 5
# wait = 10

# Rewriters

# [[rewriter]]
# rewrite all instances of testold to testnew
# old = 'testold'
# new = 'testnew'
# max = -1

# Routes

[[route]]
# a plain carbon route that sends all data to the specified carbon (graphite) server
key = 'carbon-default'
type = 'sendAllMatch'
prefix = ''
substr = ''
regex = ''
destinations = [
   '{{getenv "CARBON_RELAY_DESTINATION"}} spool=true pickle=false'
]

# [[route]]
# example route for https://grafana.com/cloud/metrics
# key = 'grafanaNet'
# type = 'grafanaNet'
# addr = 'your-base-url/metrics'
# apikey = 'your-grafana.net-api-key'
# schemasFile = 'examples/storage-schemas.conf'

[init]
# you can also put init commands here, in the same format as you'd use for the telnet interface
# (which is a bit tricky to use with its double spaces etc, so you're typically better off defining
# your setup via the sections above)
# here are some examples:
cmds = [
]

## Instrumentation ##

[instrumentation]
# in addition to serving internal metrics via expvar, you can send them to graphite/carbon
# IMPORTANT: setting this to "" will disable flushing, and metrics will pile up and lead to OOM
# see https://github.com/graphite-ng/carbon-relay-ng/issues/50
# so for now you MUST send them somewhere. sorry.
# (Also, the interval here must correspond to your setting in storage-schemas.conf if you use grafana hosted metrics)
graphite_addr = "{{getenv "CARBON_RELAY_INTERNAL_METRICS_TARGET"}}"  # localhost:2003 (how about feeding back into the relay itself? :)
graphite_interval = {{getenv "CARBON_RELAY_INTERNAL_METRICS_INTERVAL"}}  # in ms
